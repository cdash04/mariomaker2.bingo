/// <reference types="node" />
import { Writable } from 'stream';
import { Diagnostic } from 'vscode-languageserver-protocol';
export interface Writer {
    start: (workspaceDir: string) => void;
    file: (d: Diagnostic[], workspaceDir: string, filename: string, text: string) => void;
    completion: (fileCount: number, errorCount: number, warningCount: number, hintCount: number) => void;
    failure: (err: Error) => void;
}
export declare type DiagnosticFilter = (diagnostic: Diagnostic) => boolean;
export declare const DEFAULT_FILTER: DiagnosticFilter;
export declare class HumanFriendlyWriter implements Writer {
    private stream;
    private isVerbose;
    private diagnosticFilter;
    constructor(stream: Writable, isVerbose?: boolean, diagnosticFilter?: DiagnosticFilter);
    start(workspaceDir: string): void;
    file(diagnostics: Diagnostic[], workspaceDir: string, filename: string, text: string): void;
    private getCodeLine;
    private getLine;
    completion(_f: number, errorCount: number, warningCount: number, hintCount: number): void;
    failure(err: Error): void;
}
export declare class MachineFriendlyWriter implements Writer {
    private stream;
    private diagnosticFilter;
    constructor(stream: Writable, diagnosticFilter?: DiagnosticFilter);
    private log;
    start(workspaceDir: string): void;
    file(diagnostics: Diagnostic[], workspaceDir: string, filename: string, _text: string): void;
    completion(fileCount: number, errorCount: number, warningCount: number, hintCount: number): void;
    failure(err: Error): void;
}
